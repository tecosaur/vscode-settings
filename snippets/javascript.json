{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "else if": {
        "prefix": "elif",
        "body": ["else if (${1:condition}) {", "$2", "}$0"]
    },
    "random integer": {
        "prefix": "ri",
        "body": "(Math.floor(Math.random() * (${2:max} - ${1:min} + 1)) + ${1:min})",
        "description": "randint"
    },
    "url manipulation object": {
        "prefix": "url",
        "description": "URL Manipulator",
        "body": [
            "const url = {",
            "\tgetData: function (s) {",
            "\t\tthis.dataSource = s === undefined ? window.location.search : s;",
            "\t\ts = this.dataSource.split('?')[this.dataSource.split('?').length > 1 ? 1 : 0].split('&');",
            "\t\tif (s === \"\") {",
            "\t\t\treturn {};",
            "\t\t}",
            "\t\tvar b = {};",
            "\t\tfor (var i = 0; i < s.length; ++i) {",
            "\t\t\tvar p = s[i].split('=', 2);",
            "\t\t\tif (p.length != 2) {",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "\t\t\tb[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));",
            "\t\t}",
            "\t\treturn b;",
            "\t},",
            "\tdata2string: function (o) {",
            "\t\treturn $.map(Object.keys(o), function (i) {",
            "\t\t\tif (o[i] !== '') {",
            "\t\t\t\treturn i + '=' + o[i];",
            "\t\t\t}",
            "\t\t}).join('&');",
            "\t},",
            "\tsetData: function (o) {",
            "\t\tvar currentData = this.getData();",
            "\t\t$.map(Object.keys(o), function (i) {",
            "\t\t\tcurrentData[i] = o[i];",
            "\t\t});",
            "\t\twindow.history.replaceState({}, document.title, window.location.href.split('?')[0].replace(/#[^#]*/, '') + (this.data2string(currentData) === '' ? '' : '?' + this.data2string(currentData)) + (window.location.href.indexOf('#') !== -1 ? '#' + window.location.href.split('#')[window.location.href.split('#').length - 1] : ''));",
            "\t},",
            "\tdataSource: window.location.search",
            "};",
            ""
        ]
    }
}
